/*
This sketch demonstrates how to use an FFT to analyze
the audio being generated by an AudioPlayer.
FFT stands for Fast Fourier Transform, which is a 
method of analyzing audio that allows you to visualize 
the frequency content of a signal. You've seen 
visualizations like this before in music players 
and car stereos.
*/

// Load the minim analysis library
import ddf.minim.analysis.*;
// Load the minim library
import ddf.minim.*;

// Initialize Minim, AudioPlayer and FFT
Minim minim;
AudioPlayer jingle;
FFT fft;

void setup() {
  size(600, 400);
  
  // We pass this to Minim so that it can load files from the data directory
  minim = new Minim(this);
  
  // Specify that we want the audio buffers of the AudioPlayer
  // to be 1024 samples long because our FFT needs to have 
  // a power-of-two buffer size and this is a good size.
  jingle = minim.loadFile("jingle.mp3", 1024);
  
  // Loop the file indefinitely
  jingle.loop();
  
  // Create an FFT object that has a time-domain buffer 
  // the same size as jingle's sample buffer note that this
  // needs to be a power of two and that it means the size
  // of the spectrum will be half as large.
  fft = new FFT( jingle.bufferSize(), jingle.sampleRate() );
}

void draw() {
  background(0);
  stroke(255);
  
  // Perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward( jingle.mix );
  
  for(int i = 0; i < fft.specSize(); i++) {
    float w = map(i, 0, fft.specSize(), 0, width);
    // draw the line for frequency band i, scaling it up a bit so we can see it
    line( w, height, w, height - fft.getBand(i)*8 );
  }
}
